
// Generalized utility function for disabling a button and changing its content while waiting for an async operation.
// I use this to show a Bootstrap spinner while resolving a related HTTP request.
// Not sure if this is a good design pattern - feedback welcome.
export async function visualizeAsyncOperation(elemSelector, operation) {
    try {
        $(elemSelector).prop('disabled', true);
        $(elemSelector).find('.async-operation-inactive').addClass('d-none');
        $(elemSelector).find('.async-operation-active').removeClass('d-none');

        // Artificial delay to illustrate functionality better TODO: remove
        await new Promise(resolve => setTimeout(resolve, 500));
        await operation();

    } finally {
        $(elemSelector).find('.async-operation-active').addClass('d-none');
        $(elemSelector).find('.async-operation-inactive').removeClass('d-none');
        $(elemSelector).prop('disabled', false);
    }
}

// Display toast message to user
export function showToast(text, category) {
    const toast = $('#toast-template').clone().attr('id', null);
    toast.find('.toast-body').html(text);

    // Add bootstrap color scheme if specified
    if (category)
        toast.addClass(`text-bg-${category}`);

    // Add toast to DOM, register in Bootstrap, and display to user
    $('.toast-container').append(toast);
    const instance = bootstrap.Toast.getOrCreateInstance(toast);
    instance.show();

    // Add fade-out effect when toast is going to be hidden
    toast.on('hide.bs.toast', () => toast.addClass('fade-out'));

    // Clean up once toast is no longer visible
    toast.on('hidden.bs.toast', () => {
        instance.dispose();
        toast.remove();
    });
}

// Display HTTP error as toast message
export function showHttpErrorToast(xhr, message) {
    showToast(message + '<br/>' + constructHttpStatusMessage(xhr), 'danger');
}

// Construct error message from HTTP error object
export function constructHttpStatusMessage(xhr) {
    const message = `Status: ${xhr.status} ${getHttpStatusString(xhr.status)}`;
    if (xhr.responseJSON)
        return message + '<br/>' + xhr.responseJSON.message;
    else
        return message;
}

// Helper function for getting a description string for an HTTP status code.
// Source: HTTP response status codes. (November 3, 2023).
// Retrieved March 27, 2024, from https://developer.mozilla.org/en-US/docs/Web/HTTP/Status
//
// Cases are generated by running the following snippet in console:
//
// Array.from(document.querySelectorAll('section dt code'))
//     .map(node => 'case ' + node.innerText.replace(/\s+/, ': return "') + '";').join('\n')
//
export function getHttpStatusString(statusCode) {
    switch (statusCode) {
        case 100:
            return "Continue";
        case 101:
            return "Switching Protocols";
        case 102:
            return "Processing";
        case 103:
            return "Early Hints";
        case 200:
            return "OK";
        case 201:
            return "Created";
        case 202:
            return "Accepted";
        case 203:
            return "Non-Authoritative Information";
        case 204:
            return "No Content";
        case 205:
            return "Reset Content";
        case 206:
            return "Partial Content";
        case 207:
            return "Multi-Status";
        case 208:
            return "Already Reported";
        case 226:
            return "IM Used";
        case 300:
            return "Multiple Choices";
        case 301:
            return "Moved Permanently";
        case 302:
            return "Found";
        case 303:
            return "See Other";
        case 304:
            return "Not Modified";
        case 305:
            return "Use Proxy";
        case 306:
            return "unused";
        case 307:
            return "Temporary Redirect";
        case 308:
            return "Permanent Redirect";
        case 400:
            return "Bad Request";
        case 401:
            return "Unauthorized";
        case 402:
            return "Payment Required";
        case 403:
            return "Forbidden";
        case 404:
            return "Not Found";
        case 405:
            return "Method Not Allowed";
        case 406:
            return "Not Acceptable";
        case 407:
            return "Proxy Authentication Required";
        case 408:
            return "Request Timeout";
        case 409:
            return "Conflict";
        case 410:
            return "Gone";
        case 411:
            return "Length Required";
        case 412:
            return "Precondition Failed";
        case 413:
            return "Payload Too Large";
        case 414:
            return "URI Too Long";
        case 415:
            return "Unsupported Media Type";
        case 416:
            return "Range Not Satisfiable";
        case 417:
            return "Expectation Failed";
        case 418:
            return "I'm a teapot";
        case 421:
            return "Misdirected Request";
        case 422:
            return "Unprocessable Content";
        case 423:
            return "Locked";
        case 424:
            return "Failed Dependency";
        case 425:
            return "Too Early";
        case 426:
            return "Upgrade Required";
        case 428:
            return "Precondition Required";
        case 429:
            return "Too Many Requests";
        case 431:
            return "Request Header Fields Too Large";
        case 451:
            return "Unavailable For Legal Reasons";
        case 500:
            return "Internal Server Error";
        case 501:
            return "Not Implemented";
        case 502:
            return "Bad Gateway";
        case 503:
            return "Service Unavailable";
        case 504:
            return "Gateway Timeout";
        case 505:
            return "HTTP Version Not Supported";
        case 506:
            return "Variant Also Negotiates";
        case 507:
            return "Insufficient Storage";
        case 508:
            return "Loop Detected";
        case 510:
            return "Not Extended";
        case 511:
            return "Network Authentication Required";
        default:
            return '(unknown)';
    }
}